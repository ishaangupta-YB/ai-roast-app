// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(cuid())
  clerkId           String            @unique
  email             String            @unique
  username          String?           @unique
  photo             String?
  planId            Int               @default(1)
  creditBalance     Int               @default(10)
  customerId        String?           @unique // Stripe customer ID, this will be important when we need to delete the subscription
  githubHistories   GithubHistory[]
  // linkedinHistories LinkedinHistory[]
  leetcodeHistories LeetcodeHistory[]
  resumeHistories   ResumeHistory[]
  subscription      Subscription?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model GithubHistory {
  id         String   @id @default(cuid())
  userId     String
  createdAt  DateTime @default(now())
  inputType  String
  inputData  String
  outputData String
  user       User     @relation(fields: [userId], references: [id])
}

// model LinkedinHistory {
//   id         String   @id @default(cuid())
//   userId     String
//   createdAt  DateTime @default(now())
//   inputType  String
//   inputData  String
//   outputData String
//   user       User     @relation(fields: [userId], references: [id])
// }

model LeetcodeHistory {
  id         String   @id @default(cuid())
  userId     String
  createdAt  DateTime @default(now())
  inputType  String
  inputData  String
  outputData String
  user       User     @relation(fields: [userId], references: [id])
}

model ResumeHistory {
  id         String   @id @default(cuid())
  userId     String
  createdAt  DateTime @default(now())
  inputType  String
  inputData  String
  outputData String
  user       User     @relation(fields: [userId], references: [id])
}

model Subscription {
  id          String   @id @default(cuid()) @map("_id")
  userId      String   @unique
  planTitle   String
  planPrice   Float
  planDetails String[]
  startDate   DateTime @default(now())
  endDate     DateTime
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum PopularPlan {
  NO
  YES
}

enum PLAN {
  free
  premium
}

enum SUBSCRIPTIONPERIOD {
  monthly
  yearly
}
